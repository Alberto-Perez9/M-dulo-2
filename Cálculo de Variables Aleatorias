"""Cálculo de Variables Aleatorias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ru2T58UFnBSBuEDsquuZGNcLwQOGZvyt

# **Cálculo de variables aleatorias**
1.   Documenta tu colab
2.   Calcular la ley de las siguientes variables aleatorias
     *   La diferencia de las caras es mayor que 1
     *   La suma de las caras sea par
3. Verifica en cada caso, que
   $$\sum_{k\in R_{X}}\mathbb{P}(X=k) = 1$$
4. Gráfica y calcula la función de distribución de la v.a. S (la suma de los resultados es n)  
     Aquí pueden utilizar Python (para los que ya tengan conocimiento previo de matplotlib) o dibujado a mano / tablet /etc
5. Sube tu notebook a GitHub
"""

from itertools import product
from fractions import Fraction
from collections import defaultdict
import pandas as pd
import numpy as np
import scipy.stats as ss
import matplotlib.pyplot as plt
import seaborn as sns

# Espacio muestral
def P(A, Omega):
        P = Fraction(len(A),len(Omega))
        return P

L = [i for i in range(1,7)]
print(L)
Omega = set(product(L, repeat=2))
Omega

"""Cálculo de las variables aleatorias
Cuando la diferencia de las caras es mayor a 1
"""

S_mayor_1 = defaultdict(set)
S_mayor_1 = {(i,j): i-j for i,j in Omega if i-j > 1}
# Elementos de Omega que cumplen con la condicion
S_mayor_1

#Crear un diccionario por default de manera sintetica y arreglada
dS_mayor_1 = defaultdict(set)
dS_mayor_1
for i,j in S_mayor_1.items():
      dS_mayor_1[j].add(i)
dS_mayor_1

leyS_mayor_1 = defaultdict(set)
leyS_mayor_1 = {k : P(A,S_mayor_1) for k,A in dS_mayor_1.items() }
# Se imprime la probabilidad del experimeneto,
for i in leyS_mayor_1:
      print(leyS_mayor_1[i],', si k =',i)

"""3. Verifica en cada caso, que
   $$\sum_{k\in R_{X}}\mathbb{P}(X=k) = 1$$
"""

# Se verifica que la suma es
(2/5)+(1/5)+(1/10)+(3/10)

# Se verifica que la suma es
y_ley_lista = []
x_ley_lista = []
suma = 0
for i in leyS_mayor_1:
    suma = suma + float(leyS_mayor_1[i])
    y_ley_lista.append(float(leyS_mayor_1[i]))
    x_ley_lista.append(i)
print(suma)

"""4. Grafíca y calcula la función de distribución de la variable aleatoria (la suma de los resultados es n)"""

y_ley_lista

x_ley_lista

y = y_ley_lista
x = x_ley_lista
plt.plot(x,y)
plt.vlines(x,0,y)
plt.title("Distribución Diferencia de las caras dos dados es mayor que 1")
plt.ylabel("Probabilidad")
plt.xlabel("Diferencia de las caras")
plt.xticks(range(2, 6, 1))
plt.show()

df = pd.DataFrame(y_ley_lista,x_ley_lista)
df = df.reset_index()
df = df.set_axis(['Diferencia', 'Probabilidad'], axis=1)
df.sort_values('Diferencia', inplace=True)
df
